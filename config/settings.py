"""
Django settings for Lemon-api project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-0b%4yfbe^i8=td=3hydac=5mepdh@$)d(j%wok36hfj%6tperv"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "True")

ALLOWED_HOSTS = [
    "*",
    "http://localhost:3000",
]

# OpenFGA Configuration
OPENFGA_API_SCHEME = "http"  # ou "https" en production
FGA_API_URL = "http://localhost:8080"  # Remplacez par l'URL de votre serveur OpenFGA
FGA_STORE_ID = "01JAHE1QQ9QF6B7D6GB9E3PCWQ"  # L'ID de votre store OpenFGA
FGA_MODEL_ID = "01JAJX1KK3YYGC4EXB0P0BZW4G"

# Redis configuration
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", "6379"))
REDIS_DB = int(os.getenv("REDIS_DB", "0"))


# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "ninja_extra",
]

LOCAL_APPS = [
    "apps.users",
    "apps.region",
    "apps.levels",
    "apps.domain",
    "apps.mentions",
    "apps.establishment_type",
]

INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTH_USER_MODEL = "users.User"

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "cartographie_db",
        "USER": "cartographie",
        "PASSWORD": "123456789",
        "HOST": "localhost",
        "PORT": "5432",
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "logs", "debug.log"),
            "formatter": "verbose",
        },
    },
    "loggers": {
        "": {  # Root logger
            "handlers": ["console", "file"],
            "level": "INFO",
        },
        "presentation": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "core": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}


# JWT configuration
JWT_ISSUER = os.getenv("JWT_ISSUER", "lemon-app")
JWT_AUDIENCE = os.getenv("JWT_AUDIENCE", "lemon-users")
JWT_ALGORITHM = "RS256"  # Changement crucial: utiliser RS256 au lieu de HS256

# Durée de vie des tokens
ACCESS_TOKEN_LIFETIME = timedelta(minutes=15)
REFRESH_TOKEN_LIFETIME = timedelta(days=7)

# Charger les clés depuis les fichiers
KEYS_DIR = BASE_DIR / "keys"

try:
    with open(KEYS_DIR / "jwt_access_private.pem", "r") as f:
        JWT_ACCESS_PRIVATE_KEY = f.read()

    with open(KEYS_DIR / "jwt_access_public.pem", "r") as f:
        JWT_ACCESS_PUBLIC_KEY = f.read()

    with open(KEYS_DIR / "jwt_refresh_private.pem", "r") as f:
        JWT_REFRESH_PRIVATE_KEY = f.read()

    with open(KEYS_DIR / "jwt_refresh_public.pem", "r") as f:
        JWT_REFRESH_PUBLIC_KEY = f.read()
except FileNotFoundError:
    # Messages d'erreur pour alerter que les clés sont manquantes
    print("ERREUR: Fichiers de clés JWT non trouvés dans le dossier 'keys/'")
    print("Veuillez exécuter les commandes suivantes pour générer les clés:")
    print("mkdir -p keys")
    print("openssl genrsa -out keys/jwt_access_private.pem 2048")
    print(
        "openssl rsa -in keys/jwt_access_private.pem -pubout -out keys/jwt_access_public.pem"
    )
    print("openssl genrsa -out keys/jwt_refresh_private.pem 2048")
    print(
        "openssl rsa -in keys/jwt_refresh_private.pem -pubout -out keys/jwt_refresh_public.pem"
    )

    # Valeurs fictives pour le développement - NE PAS UTILISER EN PRODUCTION
    JWT_ACCESS_PRIVATE_KEY = JWT_REFRESH_PRIVATE_KEY = JWT_ACCESS_PUBLIC_KEY = (
        JWT_REFRESH_PUBLIC_KEY
    ) = "invalid"

# Django Ninja settings
NINJA_PAGINATION_CLASS = "ninja.pagination.PageNumberPagination"
NINJA_PAGINATION_PER_PAGE = 10
NINJA_PAGINATION_MAX_LIMIT = 100
NINJA_NUM_PROXIES = None
NINJA_DEFAULT_THROTTLE_RATES = {
    "user": "1000/hour",
    "anon": "100/hour",
}
